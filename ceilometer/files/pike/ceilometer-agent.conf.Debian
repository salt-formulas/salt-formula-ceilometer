{%- from "ceilometer/map.jinja" import agent with context -%}
[DEFAULT]

{%- if agent.debug is defined %}
debug = {{ agent.debug }}
{%- endif %}

{%- if agent.message_queue.rpc_thread_pool_size is defined %}
executor_thread_pool_size = {{ agent.message_queue.rpc_thread_pool_size }}
{%- endif %}

{%- set rabbit_port = agent.message_queue.get('port', 5671 if agent.message_queue.get('ssl',{}).get('enabled', False)  else 5672) %}
{%- if agent.message_queue.members is defined %}
transport_url = rabbit://{% for member in agent.message_queue.members -%}
                             {{ agent.message_queue.user }}:{{ agent.message_queue.password }}@{{ member.host }}:{{  member.get('port', rabbit_port) }}
                             {%- if not loop.last -%},{%- endif -%}
                         {%- endfor -%}
                             /{{ agent.message_queue.virtual_host }}
{%- else %}
transport_url = rabbit://{{ agent.message_queue.user }}:{{ agent.message_queue.password }}@{{ agent.message_queue.host }}:{{ rabbit_port }}/{{ agent.message_queue.virtual_host }}
{%- endif %}

[compute]

instance_discovery_method = {{ agent.get('discovery_method', 'libvirt_metadata') }}

[keystone_authtoken]

auth_type = password
user_domain_id = {{ agent.identity.get('domain', 'default') }}
project_domain_id = {{ agent.identity.get('domain', 'default') }}
project_name = {{ agent.identity.tenant }}
username = {{ agent.identity.user }}
password = {{ agent.identity.password }}
auth_uri = {{ agent.identity.get('protocol', 'http') }}://{{ agent.identity.host }}:5000
auth_url = {{ agent.identity.get('protocol', 'http') }}://{{ agent.identity.host }}:35357
interface = internal

{%- if agent.identity.get('protocol', 'http') == 'https' %}
cafile={{ agent.identity.get('cacert_file', agent.cacert_file) }}
{%- endif %}

{%- if agent.cache is defined %}
memcached_servers = {%- for member in agent.cache.members %}{{ member.host }}:{{ member.get('port', '11211') }}{% if not loop.last %},{% endif %}{%- endfor %}
{%- else %}
token_cache_time = -1
{%- endif %}

[oslo_messaging_notifications]

topics = notifications

[service_credentials]

auth_type = password
user_domain_id = {{ agent.identity.get('domain', 'default') }}
project_domain_id = {{ agent.identity.get('domain', 'default') }}
project_name = {{ agent.identity.tenant }}
username = {{ agent.identity.user }}
password = {{ agent.identity.password }}
auth_url = {{ agent.identity.get('protocol', 'http') }}://{{ agent.identity.host }}:5000
token_cache_time = -1
interface = internal
region_name = {{ agent.get('region', 'RegionOne') }}

{%- from "ceilometer/map.jinja" import agent with context -%}
[DEFAULT]

{%- if agent.debug is defined %}
debug = {{ agent.debug }}
{%- endif %}

{%- if agent.message_queue.rpc_thread_pool_size is defined %}
executor_thread_pool_size = {{ agent.message_queue.rpc_thread_pool_size }}
{%- endif %}

{%- set rabbit_port = agent.message_queue.get('port', 5671 if agent.message_queue.get('ssl',{}).get('enabled', False)  else 5672) %}
{%- if agent.message_queue.members is defined %}
transport_url = rabbit://{% for member in agent.message_queue.members -%}
                             {{ agent.message_queue.user }}:{{ agent.message_queue.password }}@{{ member.host }}:{{  member.get('port', rabbit_port) }}
                             {%- if not loop.last -%},{%- endif -%}
                         {%- endfor -%}
                             /{{ agent.message_queue.virtual_host }}
{%- else %}
transport_url = rabbit://{{ agent.message_queue.user }}:{{ agent.message_queue.password }}@{{ agent.message_queue.host }}:{{ rabbit_port }}/{{ agent.message_queue.virtual_host }}
{%- endif %}

{%- if agent.get('libvirt',{}).get('ssl',{}).get('enabled', False) == True %}
{%- set libvirt_uri = 'qemu+tls://' ~ grains.get('fqdn') ~ '/system' %}
{%- endif %}

{%- if libvirt_uri is defined or agent.get('libvirt',{}).libvirt_uri is defined %}
libvirt_uri = {{ agent.get('libvirt',{}).get('libvirt_uri', libvirt_uri) }}
{%- endif %}

[compute]

instance_discovery_method = {{ agent.get('discovery_method', 'libvirt_metadata') }}

[keystone_authtoken]

auth_type = password
user_domain_id = {{ agent.identity.get('domain', 'default') }}
project_domain_id = {{ agent.identity.get('domain', 'default') }}
project_name = {{ agent.identity.tenant }}
username = {{ agent.identity.user }}
password = {{ agent.identity.password }}
auth_uri = {{ agent.identity.get('protocol', 'http') }}://{{ agent.identity.host }}:5000
auth_url = {{ agent.identity.get('protocol', 'http') }}://{{ agent.identity.host }}:35357
interface = internal

{%- if agent.identity.get('protocol', 'http') == 'https' %}
cafile={{ agent.identity.get('cacert_file', agent.cacert_file) }}
{%- endif %}

{%- if agent.cache is defined %}
memcached_servers = {%- for member in agent.cache.members %}{{ member.host }}:{{ member.get('port', '11211') }}{% if not loop.last %},{% endif %}{%- endfor %}
{%- else %}
token_cache_time = -1
{%- endif %}

[oslo_messaging_notifications]

topics = notifications

[oslo_messaging_rabbit]

{%- if agent.message_queue.get('ssl',{}).get('enabled', False) %}
rabbit_use_ssl=true

{%- if agent.message_queue.ssl.version is defined %}
kombu_ssl_version = {{ agent.message_queue.ssl.version }}
{%- elif salt['grains.get']('pythonversion') > [2,7,8] %}
kombu_ssl_version = TLSv1_2
{%- endif %}

kombu_ssl_ca_certs = {{ agent.message_queue.ssl.get('cacert_file', agent.cacert_file) }}
{%- endif %}

[service_credentials]

auth_type = password
user_domain_id = {{ agent.identity.get('domain', 'default') }}
project_domain_id = {{ agent.identity.get('domain', 'default') }}
project_name = {{ agent.identity.tenant }}
username = {{ agent.identity.user }}
password = {{ agent.identity.password }}
auth_url = {{ agent.identity.get('protocol', 'http') }}://{{ agent.identity.host }}:5000
token_cache_time = -1
interface = internal
region_name = {{ agent.get('region', 'RegionOne') }}

{%- if agent.get('vmware', {}).get('enabled', False) %}
{%- set _data = agent.vmware %}
[vmware]

#
# From ceilometer
#

# IP address of the VMware vSphere host. (host address value)
#host_ip = 127.0.0.1
{%- if _data.host_ip is defined %}
host_ip = {{ _data.host_ip }}
{%- endif %}

# Port of the VMware vSphere host. (port value)
# Minimum value: 0
# Maximum value: 65535
#host_port = 443
{%- if _data.host_port is defined %}
host_port = {{ _data.host_port }}
{%- endif %}

# Username of VMware vSphere. (string value)
#host_username =
host_username = {{ _data.host_username }}

# Password of VMware vSphere. (string value)
#host_password =
host_password = {{ _data.host_password }}

# CA bundle file to use in verifying the vCenter server certificate. (string
# value)
#ca_file = <None>
{%- if _data.cacert_file is defined %}
ca_file = {{ _data.cacert_file }}
{%- endif %}

# If true, the vCenter server certificate is not verified. If false, then the
# default CA truststore is used for verification. This option is ignored if
# "ca_file" is set. (boolean value)
#insecure = false
{%- if _data.insecure is defined %}
insecure = {{ _data.insecure }}
{%- endif %}

# Number of times a VMware vSphere API may be retried. (integer value)
#api_retry_count = 10
{%- if _data.api_retry_count is defined %}
api_retry_count = {{ _data.api_retry_count }}
{%- endif %}

# Sleep time in seconds for polling an ongoing async task. (floating point
# value)
#task_poll_interval = 0.5
{%- if _data.task_poll_interval is defined %}
task_poll_interval = {{ _data.task_poll_interval }}
{%- endif %}

# Optional vim service WSDL location e.g http://<server>/vimService.wsdl.
# Optional over-ride to default location for bug work-arounds. (string value)
#wsdl_location = <None>
{%- if _data.wsdl_location is defined %}
wsdl_location = {{ _data.wsdl_location }}
{%- endif %}

{%- endif %}

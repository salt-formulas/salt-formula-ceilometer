{%- from "ceilometer/map.jinja" import server with context -%}
[DEFAULT]


{%- if server.batch_polled_samples is defined %}
batch_polled_samples = {{ server.batch_polled_samples|lower }}
{%- endif %}

{%- if server.debug is defined %}
debug = {{ server.debug }}
{%- endif %}

{%- if server.logging.log_appender %}
log_config_append=/etc/ceilometer/logging.conf
{%- endif %}

{%- if server.message_queue.rpc_thread_pool_size is defined %}
executor_thread_pool_size = {{ server.message_queue.rpc_thread_pool_size }}
{%- endif %}

{%- set rabbit_port = server.message_queue.get('port', 5671 if server.message_queue.get('ssl',{}).get('enabled', False)  else 5672) %}
{%- if server.message_queue.members is defined %}
transport_url = rabbit://{% for member in server.message_queue.members -%}
                             {{ server.message_queue.user }}:{{ server.message_queue.password }}@{{ member.host }}:{{  member.get('port', rabbit_port) }}
                             {%- if not loop.last -%},{%- endif -%}
                         {%- endfor -%}
                             /{{ server.message_queue.virtual_host }}
{%- else %}
transport_url = rabbit://{{ server.message_queue.user }}:{{ server.message_queue.password }}@{{ server.message_queue.host }}:{{ rabbit_port }}/{{ server.message_queue.virtual_host }}
{%- endif %}

[coordination]


{%- if server.coordination_backend is defined %}
backend_url = {{ server.coordination_backend.url }}
{%-  endif %}

{%- if server.get('coordination_backend', {}).heartbeat is defined %}
heartbeat = {{ server.coordination_backend.heartbeat }}
{%- endif %}

{%- if server.get('coordination_backend', {}).check_watchers is defined %}
check_watchers = {{ server.coordination_backend.check_watchers }}
{%- endif %}

{%- if server.get('coordination_backend', {}).retry_backoff is defined %}
retry_backoff = {{ server.coordination_backend.retry_backoff }}
{%- endif %}

{%- if server.get('coordination_backend', {}).max_retry_interval is defined %}
max_retry_interval = {{ server.coordination_backend.max_retry_interval }}
{%- endif %}


[cors]


{%- if server.get('cors', {}).allowed_origin is defined %}
allowed_origin = {{ server.cors.allowed_origin }}
{%- endif %}

{%- if server.get('cors', {}).allow_credentials is defined %}
allow_credentials = {{ server.cors.allow_credentials }}
{%- endif %}

{%- if server.get('cors', {}).expose_headers is defined %}
expose_headers = {{ server.cors.expose_headers }}
{%- endif %}

{%- if server.get('cors', {}).max_age is defined %}
max_age = {{ server.cors.max_age }}
{%- endif %}

{%- if server.get('cors', {}).allow_methods is defined %}
allow_methods = {{ server.cors.allow_methods }}
{%- endif %}

{%- if server.get('cors', {}).allow_headers is defined %}
allow_headers = {{ server.cors.allow_headers }}
{%- endif %}

[notification]
{%- if server.get('notification', {}).workload_partitioning is defined %}
workload_partitioning = {{ server.notification.workload_partitioning }}
{%- endif %}

{%- if server.get('notification', {}).batch_size is defined %}
batch_size = {{ server.notification.batch_size }}
{%- endif %}

{%- if server.get('notification', {}).batch_timeout is defined %}
batch_timeout = {{ server.notification.batch_timeout }}
{%- endif %}

[database]

{%- if server.get('database', False) %}
{%- if server.database.influxdb is defined %}
{%- if server.database.influxdb.members is defined %}
metering_connection = {% for member in server.database.influxdb.members -%}
                   stacklight://{{ server.database.influxdb.user }}:{{ server.database.influxdb.password }}@{% for member in server.database.influxdb.members %}{{ member.host }}:{{ member.port }}{% if not loop.last %},{% endif %}{% endfor %}/{{ server.database.influxdb.name }}
               	    {%- endfor -%}
{%- else %}
metering_connection = stacklight://{{ server.database.influxdb.user }}:{{ server.database.influxdb.password }}@{{ server.database.influxdb.host }}:{{ server.database.influxdb.port }}/{{ server.database.influxdb.database }}
{%- endif %}
{%- endif %}

{%- if server.database.elasticsearch is defined %}
{%- if server.database.elasticsearch.get('enabled', false) %}
resource_connection = es://{{ server.database.elasticsearch.host}}:{{server.database.elasticsearch.port }}
event_connection = es://{{ server.database.elasticsearch.host}}:{{server.database.elasticsearch.port }}
{%- else %}
resource_connection = es://localhost:9200
event_connection = log://
{%- endif %}
{%- endif %}

{%- if server.database.engine == "mongodb" %}
{%- if server.database.members is defined %}
connection={{ server.database.engine }}://{{ server.database.user }}:{{ server.database.password }}@{% for member in server.database.members %}{{ member.host }}:{{ member.port }}{% if not loop.last %},{% endif %}{% endfor %}/{{ server.database.name }}
{%- else %}
connection={{ server.database.engine }}://{{ server.database.user }}:{{ server.database.password }}@{{ server.database.host }}:{{ server.database.port }}/{{ server.database.name }}
{%- endif %}
{%- endif %}
{%- endif %}


{%- if server.get('publisher', {}).get('gnocchi', {}).get('enabled', False) %}
[dispatcher_gnocchi]

{%- if server.publisher.gnocchi.filter_project is defined %}
filter_project = {{ server.publisher.gnocchi.filter_project }}
{%- endif %}

{%- if server.publisher.gnocchi.archive_policy is defined %}
archive_policy = {{ server.publisher.gnocchi.archive_policy }}
{%- endif %}

{%- if server.publisher.gnocchi.resources_definition_file is defined %}
resources_definition_file = {{ server.publisher.gnocchi.resources_definition_file }}
{%- endif %}

{%- if server.publisher.gnocchi.request_timeout is defined %}
request_timeout = {{ server.publisher.gnocchi.request_timeout }}
{%- endif %}
{%- endif %}

[keystone_authtoken]

auth_type = password
user_domain_id = {{ server.identity.get('domain', 'default') }}
project_domain_id = {{ server.identity.get('domain', 'default') }}
project_name = {{ server.identity.tenant }}
username = {{ server.identity.user }}
password = {{ server.identity.password }}
auth_uri = {{ server.identity.get('protocol', 'http') }}://{{ server.identity.host }}:5000
auth_url = {{ server.identity.get('protocol', 'http') }}://{{ server.identity.host }}:35357
interface = internal

{%- if server.identity.get('protocol', 'http') == 'https' %}
cafile={{ server.identity.get('cacert_file', server.cacert_file) }}
{%- endif %}

{%- if server.cache is defined %}
memcached_servers = {%- for member in server.cache.members %}{{ member.host }}:{{ member.get('port', '11211') }}{% if not loop.last %},{% endif %}{%- endfor %}
{%- else %}
token_cache_time = -1
{%- endif %}

[oslo_messaging_notifications]

topics = notifications

[oslo_messaging_rabbit]

{%- if server.message_queue.get('ssl',{}).get('enabled', False) %}
rabbit_use_ssl=true

{%- if server.message_queue.ssl.version is defined %}
kombu_ssl_version = {{ server.message_queue.ssl.version }}
{%- elif salt['grains.get']('pythonversion') > [2,7,8] %}
kombu_ssl_version = TLSv1_2
{%- endif %}

kombu_ssl_ca_certs = {{ server.message_queue.ssl.get('cacert_file', server.cacert_file) }}
{%- endif %}

[publisher]

{%- if server.secret is defined %}
telemetry_secret={{ server.secret }}
{%- endif %}

[service_credentials]

auth_type = password
user_domain_id = {{ server.identity.get('domain', 'default') }}
project_domain_id = {{ server.identity.get('domain', 'default') }}
project_name = {{ server.identity.tenant }}
username = {{ server.identity.user }}
password = {{ server.identity.password }}
auth_url = {{ server.identity.get('protocol', 'http') }}://{{ server.identity.host }}:5000
token_cache_time = -1
interface = internal
region_name = {{ server.get('region', 'RegionOne') }}


{%- if server.get('vmware', {}).get('enabled', False) %}
{%- set _data = server.vmware %}
[vmware]

#
# From ceilometer
#

# IP address of the VMware vSphere host. (host address value)
#host_ip = 127.0.0.1
{%- if _data.host_ip is defined %}
host_ip = {{ _data.host_ip }}
{%- endif %}

# Port of the VMware vSphere host. (port value)
# Minimum value: 0
# Maximum value: 65535
#host_port = 443
{%- if _data.host_port is defined %}
host_port = {{ _data.host_port }}
{%- endif %}

# Username of VMware vSphere. (string value)
#host_username =
host_username = {{ _data.host_username }}

# Password of VMware vSphere. (string value)
#host_password =
host_password = {{ _data.host_password }}

# CA bundle file to use in verifying the vCenter server certificate. (string
# value)
#ca_file = <None>
{%- if _data.cacert_file is defined %}
ca_file = {{ _data.cacert_file }}
{%- endif %}

# If true, the vCenter server certificate is not verified. If false, then the
# default CA truststore is used for verification. This option is ignored if
# "ca_file" is set. (boolean value)
#insecure = false
{%- if _data.insecure is defined %}
insecure = {{ _data.insecure }}
{%- endif %}

# Number of times a VMware vSphere API may be retried. (integer value)
#api_retry_count = 10
{%- if _data.api_retry_count is defined %}
api_retry_count = {{ _data.api_retry_count }}
{%- endif %}

# Sleep time in seconds for polling an ongoing async task. (floating point
# value)
#task_poll_interval = 0.5
{%- if _data.task_poll_interval is defined %}
task_poll_interval = {{ _data.task_poll_interval }}
{%- endif %}

# Optional vim service WSDL location e.g http://<server>/vimService.wsdl.
# Optional over-ride to default location for bug work-arounds. (string value)
#wsdl_location = <None>
{%- if _data.wsdl_location is defined %}
wsdl_location = {{ _data.wsdl_location }}
{%- endif %}

{%- endif %}
